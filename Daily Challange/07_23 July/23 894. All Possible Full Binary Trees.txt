/*
        894. All Possible Full Binary Trees
        

        Given an integer n, return a list of all possible full binary trees with n nodes. Each node of each tree in the answer must have Node.val == 0.

Each element of the answer is the root node of one possible tree. You may return the final list of trees in any order.

A full binary tree is a binary tree where each node has exactly 0 or 2 children.

 
Example 1:

Input: n = 7
Output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]


Example 2:

Input: n = 3
Output: [[0,0,0]]


 
Constraints:


	1 <= n <= 20
        */
        

        #include <bits/stdc++.h>
        using namespace std;
        class Solution {public:    // global map    unordered_map<int, vector<TreeNode *>> memo;        // recursion is very lengthy: memorization can help a little bit    vector<TreeNode *> allPossibleFBT(int n) {        // vector that stores ans        vector<TreeNode *> ans;        // base case        if (n < 1 || n % 2 == 0) {            // if n is less than 1 or a multiple of 2: cannot have a FULL binary tree            return ans;        }        if (memo.find(n) != memo.end()) {            // memo map has something            return memo[n];        }        if (n == 1) {            // if n is eql to 1 simply return            ans.push_back(new TreeNode(0));            memo[1] = ans;            return ans;        }        for (int i = 1; i < n; i += 2) {            vector<TreeNode *> left = allPossibleFBT(i);            vector<TreeNode *> right = allPossibleFBT(n - 1 - i);            // make trees from all possible combinations of left and right subtrees            for (int j = 0; j < left.size(); j++) {                for (int k = 0; k < right.size(); k++) {                    TreeNode *root = new TreeNode(0);                    root->left = left[j];                    root->right = right[k];                    ans.push_back(root);                }            }        }        memo[n] = ans;  // memorize the ans for this integer        return ans;    }};
